{"version":3,"sources":["firebase.js","SetGoal.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","SetGoal","props","pushToFirebase","event","preventDefault","toggleHidden","database","ref","user","uid","set","number","goalState","activity","goalString","state","className","onSubmit","this","action","htmlFor","name","type","placeholder","onChange","updateGoal","icon","faSortDown","value","Component","Counter","trackerFunction","weekIndex","dayIndex","provider","auth","GoogleAuthProvider","App","handleChange","setState","target","updateTracker","month","trackerValue","copiedArray","selected","Number","handleClear","addWeekly","weekArray","weekState","total","reduce","integer","login","signInWithPopup","then","result","logout","signOut","userGoal","goalAmount","weekOne","weekTwo","weekThree","weekFour","isHidden","bind","onAuthStateChanged","console","log","on","data","dataBase","val","goal","tracker","progressMessage","onClick","toggle","map","week","day","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.73eb016a.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/auth';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDhU4Uaio3XRiBJzpq_ssWeDLD7PWdoZeI\",\n    authDomain: \"tracker-app-b1f0e.firebaseapp.com\",\n    databaseURL: \"https://tracker-app-b1f0e.firebaseio.com\",\n    projectId: \"tracker-app-b1f0e\",\n    storageBucket: \"\",\n    messagingSenderId: \"739101612866\",\n    appId: \"1:739101612866:web:de72c18088553d7f24c6db\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, {Component} from 'react';\n\nimport firebase from './firebase';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSortDown } from '@fortawesome/free-solid-svg-icons'\n\n\nclass SetGoal extends Component {\n    constructor(props) {\n        super(props)\n        this.state={};\n    }\n    pushToFirebase = (event) => {\n        event.preventDefault();\n        this.props.toggleHidden();\n\n        // const selected = Number(event.target.value);\n\n        // if (typeof (selected) === \"number\") {\n        //     this.props.goalState = selected;\n        // }\n\n        \n        const dbRef = firebase.database().ref(this.props.user ? `users/${this.props.user.uid}/goal` : `goal`);\n        dbRef.set({\n            number: this.props.goalState,\n            activity: this.props.goalString\n        });\n    };\n\n    render(){\n\n        return(\n            \n            <section className=\"goals\">\n                <form onSubmit={this.pushToFirebase} action=\"\" className=\"set-goal\">\n                    <fieldset>\n                        {/* <legend>Update Goal</legend> */}\n                        <div>\n                            <label htmlFor=\"userGoal\">What activity is your goal for?</label>\n                            {/* <p>What activity is your goal for?</p> */}\n                            <input \n                                name=\"userGoal\"\n                                type=\"text\"\n                                placeholder=\"eg: go for a run\"\n                                onChange={this.props.updateGoal}\n                            />\n                        </div>\n                        <div>\n                            <div className=\"select-container\">\n                                <label htmlFor=\"goalAmount\">How many times per week?</label>\n                                {/* <p>How many times per week?</p> */}\n                                <FontAwesomeIcon icon={faSortDown} className=\"goal-select-arrow\" />\n                                <select \n                                    name=\"goalAmount\" \n                                    onChange={this.props.updateGoal}\n                                >\n                                    <option value=\"0\">Chose an amount</option>\n                                    <option value=\"1\">Once</option>\n                                    <option value=\"2\">Twice</option>\n                                    <option value=\"3\">Three times</option>\n                                    <option value=\"4\">Four times</option>\n                                    <option value=\"5\">Five times</option>\n                                    <option value=\"6\">Six times</option>\n                                    <option value=\"7\">Seven times</option>\n                                </select>\n                            </div> \n                        </div>\n                        <button >Save Goal</button>\n                    </fieldset>\n                </form>  \n            </section>\n        );\n    }\n\n}\n\nexport default SetGoal;","import React, {Component} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSortDown } from '@fortawesome/free-solid-svg-icons'\n\nclass Counter extends Component {\n\n    render(){\n        return(\n            <div className=\"select-container\">\n                <FontAwesomeIcon icon={faSortDown} className=\"select-arrow\" />\n                <label className=\"visually-hidden\" htmlFor=\"times\">Enter a value for this day</label>\n                <select\n                    name=\"times\"\n                    onChange={(event) => this.props.trackerFunction(event, this.props.weekIndex, this.props.dayIndex)}\n                    value={this.props.value}\n                >\n                    <option value=\"0\">0</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                </select> \n            </div>\n        );\n    }\n\n}\nexport default Counter;","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.scss';\nimport firebase from './firebase';\nimport SetGoal from './SetGoal';\nimport Counter from './Counter';\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nconst auth = firebase.auth();\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      userGoal: '',\n      goalAmount: 0,\n      month: [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],\n      weekOne: \"\",\n      weekTwo: \"\",\n      weekThree: \"\",\n      weekFour: \"\",\n      isHidden: true,\n      user: null\n    }\n    this.toggleHidden = this.toggleHidden.bind(this);\n  }\n\n  handleChange = (event) => {\n    // console.log(event.target.name);\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  toggleHidden() {\n    // console.log('stat', this.state);\n    // console.log(\"toggle\")\n    this.setState({\n      isHidden: !this.state.isHidden\n    })\n  }\n\n\n  componentDidMount() {\n    \n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({ user }, () => {\n          console.log(this.state.user.uid)\n          // {this.state.user ? `users/${this.state.user.uid}` : ``}\n          // {userIsLoggedIn ? <h1>Welcome, friend!</h1> : null}\n          const dbRef = firebase.database().ref(this.state.user ? `users/${this.state.user.uid}` : ``);\n          dbRef.on('value', (data) => {\n      \n            const dataBase = data.val();\n            // console.log(dataBase);\n            const activity = dataBase.goal.activity;\n            const number = dataBase.goal.number;\n            const tracker = dataBase.tracker;\n      \n            this.setState({\n              userGoal: activity,\n              goalAmount: number,\n              month: tracker\n            })\n      \n            this.addWeekly(this.state.month[0], \"weekOne\");\n            this.addWeekly(this.state.month[1], \"weekTwo\");\n            this.addWeekly(this.state.month[2], \"weekThree\");\n            this.addWeekly(this.state.month[3], \"weekFour\");\n\n          });\n\n        });\n      }\n    });\n\n    console.log(this.state.weekOne)\n  }\n\n  updateTracker = () => {\n    const dbRef = firebase.database().ref(this.state.user ? `users/${this.state.user.uid}/tracker` : `tracker`);\n\n    dbRef.set(this.state.month)\n  }\n\n\n  trackerValue = (event, weekIndex, dayIndex) => {\n    \n    const copiedArray = [...this.state.month];\n\n    const selected = Number(event.target.value);\n\n    if (typeof(selected) === \"number\") {\n      copiedArray[weekIndex][dayIndex] = selected;\n    }\n    // copiedArray[weekIndex][dayIndex] = event.target.value;\n    \n    this.setState({\n      month: copiedArray\n    },this.updateTracker)\n  }\n\n\n\n\n  handleClear = (event) => {\n    event.preventDefault();\n\n    this.setState({\n      month: [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]\n    },this.updateTracker)\n\n  }\n\n\n\n\n  addWeekly = (weekArray, weekState) => {\n    const total = weekArray.reduce((total, integer) => {\n      return total + integer\n    })\n    const name = weekState\n    this.setState({\n      [name]: total\n    })\n  \n  }\n  \n\n  login = () => {\n    auth.signInWithPopup(provider)\n      .then((result) => {\n        const user = result.user;\n        this.setState({\n          user\n        });\n      });\n  }\n\n  logout = () => {\n    auth.signOut()\n      .then(() => {\n        this.setState({\n          user: null\n        });\n      });\n  }\n\n\n\n  render(){\n    \n    \n    const progressMessage = (weekState) => {\n      if (weekState === 0) {\n        return \n      } else if (weekState < this.state.goalAmount) {\n        return <p>You have {this.state.goalAmount - weekState} more time(s) reach this weeks goal</p>\n      } else if (weekState == this.state.goalAmount) {\n        return <p>Congrats! You have meet your goal for this week!</p>\n      } else if (weekState > this.state.goalAmount) {\n        return <p>You have surpassed your goal!</p>\n      } \n    }\n\n\n    \n    return (\n      <div className=\"App\">\n        <header>\n          <h1>(re)solution</h1>\n          <button onClick={this.toggleHidden.bind(this)}>Set/Update Goal</button>\n          {this.state.user ? <button onClick={this.logout}>Log Out</button> : <button onClick={this.login}>Log In</button>}\n        </header>\n        <div>\n          <h2>Your goal is to <span>{this.state.userGoal}</span> : <span>{this.state.goalAmount}</span> times a week!</h2>\n        </div>  \n        {!this.state.isHidden && <SetGoal\n          goalState={this.state.goalAmount}\n          goalString={this.state.userGoal}\n          updateGoal={this.handleChange}\n          toggleHidden={this.toggleHidden}\n          toggle={this.state.isHidden}\n          user={this.state.user}\n        />}\n        \n        <p className=\"instructions\">Make your goal a habit! For each day you complete your activity select how many times. Check the progress section to see how you are doing.</p>\n        <div className=\"flex-main\">\n          <section className=\"tracker\">\n            <p>Mon</p>\n            <p>Tue</p>\n            <p>Wed</p>\n            <p>Thur</p>\n            <p>Fri</p>\n            <p>Sat</p>\n            <p>Sun</p>\n  \n            {\n              this.state.month.map((week, weekIndex) => {\n                return(\n                  week.map((day, dayIndex) => {\n                    return <Counter \n                              key={weekIndex+dayIndex}\n                              dayIndex={dayIndex}\n                              weekIndex={weekIndex}\n                              trackerFunction={this.trackerValue}\n                              value={this.state.month[weekIndex][dayIndex]}\n                            />\n                  })\n                )\n              })\n  \n            }\n          </section>\n  \n          <section className=\"results\">\n          \t<p><span>Week One:</span> {progressMessage(this.state.weekOne)}</p>\n            <p><span>Week Two:</span> {progressMessage(this.state.weekTwo)}</p>\n            <p><span>Week Three:</span> {progressMessage(this.state.weekThree)}</p>\n            <p><span>Week Four:</span> {progressMessage(this.state.weekFour)}</p>\n            <button onClick={this.handleClear}>Clear Tracked Data</button>\n          </section>\n        </div>\n        {/* <button onClick={(event) => { if (window.confirm('Delete the item?')) { this.handleClear() }; }}>Clear Tracked Data</button> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}